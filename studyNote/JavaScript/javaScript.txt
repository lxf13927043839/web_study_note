一、js简介
1、在 HTML 输出中使用 document.write。如果您在文档加载后使用该方法，会覆盖整个文档。

2、document.getElementByID("some id")。这个方法是 HTML DOM 中定义的。
DOM（文档对象模型）是用以访问 HTML 元素的正式 W3C 标准

3、ECMA-262 是 JavaScript 标准的官方名称。

二、js实现
1、<script> 和 </script> 会告诉 JavaScript 在何处开始和结束。

2、通常的做法是把函数放入 <head> 部分中，或者放在页面底部。这样就可以把它们安置到同一处位置，不会干扰页面的内容。

3、我们把 JavaScript 放到了页面代码的底部，这样就可以确保在 <p> 元素创建之后再执行脚本。

4、如需使用外部文件，请在 <script> 标签的 "src" 属性中设置该 .js 文件：

实例
<!DOCTYPE html>
<html>
<body>
<script src="myScript.js"></script>
</body>
</html>
外部脚本不能包含 <script> 标签。

三、js输出
1、写到文档输出
下面的例子直接把 <p> 元素写到 HTML 文档输出中：
document.write("<p>我的第一段 JavaScript</p>");

四、js语句
1、分号用于分隔 JavaScript 语句。

通常我们在每条可执行的语句结尾添加分号。

使用分号的另一用处是在一行中编写多条语句。

提示：您也可能看到不带有分号的案例。

在 JavaScript 中，用分号来结束语句是可选的。

2、JavaScript 对大小写敏感。

3、JavaScript 会忽略多余的空格。您可以向脚本添加空格，来提高其可读性。下面的两行代码是等效的：

var name="Hello";
var name = "Hello";

4、对代码行进行折行
您可以在文本字符串中使用反斜杠对代码行进行换行。下面的例子会正确地显示：

document.write("Hello \
World!");
不过，您不能像这样折行：

document.write \
("Hello World!");
5、JavaScript 是脚本语言。浏览器会在读取代码时，逐行地执行脚本代码。而对于传统编程来说，会在执行前对所有代码进行编译。？？？

五、js变量
1、变量必须以字母开头 
变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做） 
变量名称对大小写敏感（y 和 Y 是不同的变量）

2、JavaScript 变量有很多种类型，但是现在，我们只关注数字和字符串。

当您向变量分配文本值时，应该用双引号或单引号包围这个值。

当您向变量赋的值是数值时，不要使用引号。如果您用引号包围数值，该值会被作为文本来处理。

3、重新声明 JavaScript 变量
如果重新声明 JavaScript 变量，该变量的值不会丢失：

在以下两条语句执行后，变量 carname 的值依然是 "Volvo"：

var carname="Volvo";
var carname;

4、js函数内未声明变量：当未定义的时候  “tsestd”这个未声明的变量自动成为全局变量声明。

六、js数据类型
1、JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：

实例
var x                // x 为 undefined
var x = 6;           // x 为数字
var x = "Bill";      // x 为字符串

2、极大或极小的数字可以通过科学（指数）计数法来书写：

实例
var y=123e5;      // 12300000
var z=123e-5;     // 0.00123

3、JavaScript 数组
下面的代码创建名为 cars 的数组：

var cars=new Array();
cars[0]="Audi";
cars[1]="BMW";
cars[2]="Volvo";
或者 (condensed array):

var cars=new Array("Audi","BMW","Volvo");
或者 (literal array):

实例
var cars=["Audi","BMW","Volvo"];

4、声明变量类型
当您声明新变量时，可以使用关键词 "new" 来声明其类型：

var carname=new String;
var x=      new Number;
var y=      new Boolean;
var cars=   new Array;
var person= new Object;
JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。

七、js对象
1、当您像这样声明一个 JavaScript 变量时：

var txt = "Hello";您实际上已经创建了一个 JavaScript 字符串对象。字符串对象拥有内建的属性 length。对于上面的字符串来说，length 的值是 5。字符串对象同时拥有若干个内建的方法。

2、创建javascript对象
本例创建名为 "person" 的对象，并为其添加了四个属性：

实例
person=new Object();
person.firstname="Bill";
person.lastname="Gates";
person.age=56;
person.eyecolor="blue";

八、js函数
1、关键词 function

2、局部 JavaScript 变量
在 JavaScript 函数内部声明的变量（使用 var）是局部变量，所以只能在函数内部访问它。（该变量的作用域是局部的）。

您可以在不同的函数中使用名称相同的局部变量，因为只有声明过该变量的函数才能识别出该变量。

只要函数运行完毕，本地变量就会被删除。
全局 JavaScript 变量
在函数外声明的变量是全局变量，网页上的所有脚本和函数都能访问它。
JavaScript 变量的生存期
JavaScript 变量的生命期从它们被声明的时间开始。

局部变量会在函数运行以后被删除。

全局变量会在页面关闭后被删除。

九、js运算符
1、如果把数字与字符串相加，结果将成为字符串。

十、js switch
1、ECMAScript 和 Java 中的 switch 语句
ECMAScript 和 Java 中的 switch 语句有两点不同。在 ECMAScript 中，switch 语句可以用于字符串，而且能用不是常量的值说明情况：

var BLUE = "blue", RED = "red", GREEN  = "green";

switch (sColor) {
  case BLUE: alert("Blue");
    break;
  case RED: alert("Red");
    break;
  case GREEN: alert("Green");
    break;
  default: alert("Other");
}
这里，switch 语句用于字符串 sColor，声明 case 使用的是变量 BLUE、RED 和 GREEN，这在 ECMAScript 中是完全有效的。

十一、js for
1、For/In 循环
JavaScript for/in 语句循环遍历对象的属性：

实例
var person={fname:"John",lname:"Doe",age:25};

for (x in person)
  {
  txt=txt + person[x];
  }

十二、DOM简介
1、当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。

HTML DOM 模型被构造为对象的树。

2、查找 HTML 元素
通常，通过 JavaScript，您需要操作 HTML 元素。

为了做到这件事情，您必须首先找到该元素。有三种方法来做这件事：

通过 id 找到 HTML 元素 
通过标签名找到 HTML 元素（如 <p>段落标签名） 
通过类名找到 HTML 元素 

3、HTML DOM 允许您通过使用 JavaScript 来向 HTML 元素分配事件：<p> <img>这样的
onload 和 onunload 事件
onmouseover 和 onmouseout 事件
onmousedown、onmouseup 以及 onclick 事件
点击鼠标按钮时，会触发 onmousedown 事件，当释放鼠标按钮时，会触发 onmouseup 事件，最后，当完成鼠标点击时，会触发 onclick 事件。

十三、DOM节点
1、创建新的 HTML 元素
这段代码创建新的 <p> 元素：

var para=document.createElement("p");如需向 <p> 元素添加文本，您必须首先创建文本节点。这段代码创建了一个文本节点：

var node=document.createTextNode("这是新段落。");然后您必须向 <p> 元素追加这个文本节点：

para.appendChild(node);最后您必须向一个已有的元素追加这个新元素。

这段代码找到一个已有的元素：

var element=document.getElementById("div1");这段代码向这个已有的元素追加新元素：

element.appendChild(para);

2、删除已有的 HTML 元素
常用的解决方案：找到您希望删除的子元素，然后使用其 parentNode 属性来找到父元素：

var child=document.getElementById("p1");
child.parentNode.removeChild(child);

十四、js对象
1、创建新对象有两种不同的方法：

定义并创建对象的实例 
使用函数来定义对象，然后创建新的对象实例

2、创建直接的实例
这个例子创建了对象的一个新实例，并向其添加了四个属性：

实例
person=new Object();
person.firstname="Bill";
person.lastname="Gates";
person.age=56;
person.eyecolor="blue";

实例
person={firstname:"John",lastname:"Doe",age:50,eyecolor:"blue"};

3、使用对象构造器
本例使用函数来构造对象：

实例
function person(firstname,lastname,age,eyecolor)
{
this.firstname=firstname;
this.lastname=lastname;
this.age=age;
this.eyecolor=eyecolor;
}
var myFather=new person("Bill","Gates",56,"blue");


4、把方法添加到 JavaScript 对象
方法只不过是附加在对象上的函数。

在构造器函数内部定义对象的方法：

function person(firstname,lastname,age,eyecolor)
{
this.firstname=firstname;
this.lastname=lastname;
this.age=age;
this.eyecolor=eyecolor;

this.changeName=changeName;
function changeName(name)
{
this.lastname=name;
}
}

5、JavaScript 类
JavaScript 是面向对象的语言，但 JavaScript 不使用类。

在 JavaScript 中，不会创建类，也不会通过类来创建对象（就像在其他面向对象的语言中那样）。（自身理解就是不用class关键字）

JavaScript 基于 prototype，而不是基于类的。

十五、js数字
1、JavaScript 只有一种数字类型。

可以使用也可以不使用小数点来书写数字

2、极大或极小的数字可通过科学（指数）计数法来写：
实例
var y=123e5;    // 12300000
var z=123e-5;   // 0.00123

3、所有 JavaScript 数字均为 64 位
整数（不使用小数点或指数计数法）最多为 15 位。

小数的最大位数是 17，但是浮点运算并不总是 100% 准确

4、前缀为 0，则 JavaScript 会把数值常量解释为八进制数，如果前缀为 0 和 "x"，则解释为十六进制数

十六、js数组
1、有两种向数组赋值的方法（你可以添加任意多的值，就像你可以定义你需要的任意多的变量一样）。
var mycars=new Array()
mycars[0]="Saab"

也可以使用一个整数自变量来控制数组的容量：
var mycars=new Array(3)
mycars[0]="Saab"

十七、js逻辑
1、如果逻辑对象无初始值或者其值为 0、-0、null、""、false、undefined 或者 NaN，那么对象的值为 false。否则，其值为 true（即使当自变量为字符串 "false" 时）！

十八、js正则表达式
1、什么是 RegExp？
RegExp 是正则表达式的缩写。

当您检索某个文本时，可以使用一种模式来描述要检索的内容。RegExp 就是这种模式。

简单的模式可以是一个单独的字符。

更复杂的模式包括了更多的字符，并可用于解析、格式检查、替换等等。

您可以规定字符串中的检索位置，以及要检索的字符类型，等等。

2、RegExp 对象的方法
RegExp 对象有 3 个方法：test()、exec() 以及 compile()。

	test() 方法检索字符串中的指定值。返回值是 true 或 false。

	例子：
	var patt1=new RegExp("e");

	document.write(patt1.test("The best things in life are free")); 

	exec()
exec() 方法检索字符串中的指定值。返回值是被找到的值。如果没有发现匹配，则返回 null。

	compile()
	compile() 方法用于改变 RegExp。
	compile() 既可以改变检索模式，也可以添加或删除第二个参数。

十九、js消息框
1、可以在 JavaScript 中创建三种消息框：警告框、确认框、提示框。

二十、js库
1、CDN - 内容分发网络：Content Delivery Network
在您的网页中使用 JavaScript 框架库，只需在 <script> 标签中引用该库即可：

引用 jQuery
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js">
</script>

