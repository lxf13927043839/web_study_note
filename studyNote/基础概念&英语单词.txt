1、占位符
	顾名思义，占位符就是先占住一个固定的位置，等着你再往里面添加内容的。它在幻灯片上表现为一个虚框，虚框内部往往有“单击此处添加标题”之类的提示语，一旦鼠标点击之后，提示语会自动消失。

2、词法作用域和动态作用域
作用域
作用域是指程序源代码中定义变量的区域。

作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。

JavaScript 采用词法作用域(lexical scoping)，也就是静态作用域。

静态作用域与动态作用域
因为 JavaScript 采用的是词法作用域，函数的作用域在函数定义的时候就决定了。

var value = 1;

function foo() {
    console.log(value);
}

function bar() {
    var value = 2;
    foo();
}

bar();

// 结果是 ???
假设JavaScript采用静态作用域，让我们分析下执行过程：

执行 foo 函数，先从 foo 函数内部查找是否有局部变量 value，如果没有，就根据书写的位置，查找上面一层的代码，也就是 value 等于 1，所以结果会打印 1。

假设JavaScript采用动态作用域，让我们分析下执行过程：

执行 foo 函数，依然是从 foo 函数内部查找是否有局部变量 value。如果没有，就从调用函数的作用域，也就是 bar 函数内部查找 value 变量，所以结果会打印 2。

前面我们已经说了，JavaScript采用的是静态作用域，所以这个例子的结果是 1。

3、强类型和弱类型语言的区别
 	强类型是数据定义时候就确定数据类型的，以后是不可以修改的，而且变量在计算机中分配的储存空间是固定的；比如a为数字1；后面就不可以修改成abc这种字符串类型；
比如c++里的 string name;int age;觉得name就是一个字符串类型，而age是数值类型的；
	弱类型的语言，比如js是可以任意修改的；是先占一个位置，但是不分配数据类型的大小，赋值数据的时候再用，不事先准备，只准备凳子，胖的就挤一挤，瘦子就多占点；占位置和做位置分开的；变量的声明和变量的赋值是分开的；JS中的变量只是准备的不充分，但是也有准备的；就牵扯到预解释，在预解释那章会详细介绍；
	强类型语言，在变量创建的时候，就强制要求声明类型；而弱类型语言就显得很随意；
	强类型的语言中，变量类型是事先指定的；
	弱类型的语言中，变量的类型是赋值后根据值来决定的，赋什么样的值，就决定了变量是什么类型；

======================================================

英语单词：

Syntax：语法

Reference：引用

equally：平等地，相等地

anonymous：匿名的

Identifier：标识符

uncaught：未捕获

exception：例外

contain：包含

collapse：合并

align：排列、校准

banner：横幅

transition：过渡、转变

flat：水平的、平面部分

preserve：保存、维护、保护

nowrap：不换行

floor：地板，在Math方法中隐含着向下的意思

ceil：天花板，在Math中隐含着向上的意思

instance : 实例、对象

PrimitiveValue：原始值。

tag：标签

splice：剪接

attach：附加的意思

propagation：传播

agent: 代理人

viewport：视口

constructor: 构造器、构造函数

prototype: 原型、雏形

scope: 作用域

global：全局的，全局作用域

local：局部的，局部作用域

closure: 闭包

delegate:授权、代表

fragment：碎片

toggle：切换

context：上下文、背景

content：内容

expires：过期

custom：定制的，习俗，习惯

reference: 涉及、提到、查询、查阅